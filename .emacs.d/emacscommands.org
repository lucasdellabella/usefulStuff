|| TAB to expand Shift+TAB to close

* File Management
 - C-x C-f :: Find or create file
 - C-x b   :: Switch to different buffer
 - C-x C-w :: Write file (AKA Save As)
   
* Frame Management
 - C-x 0   :: Close current window
 - C-x 1   :: Delete all but current window
 - C-x 2   :: Split window into top & bottom windows
 - C-x 3   :: Split window into left & right windows
 - C-x +   :: Distribute windows evenly
 
* Navigation
** Cursor
| By single character |
 - C-f     :: forward
 - C-b     :: backward
 - C-n     :: next line
 - C-p     :: previous line

| By word, expression, or line |
 - M-f     :: end of word
 - M-b     :: beginning of word

 - C-M-f   :: end of right exp

 - C-M-b   :: beginning of left exp

 - C-a     :: beginning of line
 - C-e     :: end of line

** File
 - C-v     :: next page
 - M-v     :: previous page

 - M-<     :: beginning of file
 - M->     :: end of file

* Editing

 - M-bkspc :: backwards delete word

 - C-d     :: forwards kill char
 - M-d     :: forwards kill word

 - M-w     :: Copy selection
 - C-w     :: Kill Selection
 - C-y     :: Paste Selection

 - C-k     :: Kill line

|Advanced|
 - M-y     :: Go further into kill-ring history after a paste
 - C-s     :: find forwards
 - C-r     :: find backwards
 - M-%     :: find-replace
 - M-u     :: UPPERCASE word
 - M-l     :: lowercase word
              
* M-x paredit-mode
| 'Slurps' the closest left or right expression into the parens |
 - C-(     :: println ("hello") world" -> (println "hello") "world"
 - C-)     :: (println) "hello world" -> (println "hello) world"

| 'Spits' the leftmost or rightmost expression out of the parens |
 - C-{     :: (println "hello" "world") -> println ("hello" "world")  
 - C-}     :: (println "hello" "world") -> (println "hello") "world"

 - M-s     :: (a b c) -> a b c


*  Clojure Core Concepts
** Functional Language Concepts
  + Code As Data
  + Higher Order Functions
  + Elimination of underlying state
  + Prefix Notation

** ah-genda <2015-09-04 Fri>
